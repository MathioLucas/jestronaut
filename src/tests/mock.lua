require "jestronaut".withGlobals()
local mock = require "jestronaut.mock"

describe('mocks', function()
  describe('function mocks', function()
    it('can be created', function()
      local mockFn = mock.fn()
      expect(mockFn).toBeType('function')
    end)

    it('can be called', function()
      local mockFn = mock.fn()
      mockFn()
      expect(mockFn).toHaveBeenCalled()
    end)

    it('can be called with arguments', function()
      local mockFn = mock.fn()
      mockFn(1, 2, 3)
      expect(mockFn).toHaveBeenCalledWith(1, 2, 3)
    end)

    it('can be called with arguments and return values', function()
      local mockFn = mock.fn()
      mockFn.returns(4, 5, 6)
      expect(mockFn(1, 2, 3)).toEqual({4, 5, 6})
    end)

    it('can be called with arguments and return values', function()
      local mockFn = mock.fn()
      mockFn.returns(4, 5, 6)
      expect(mockFn(1, 2, 3)).toEqual({4, 5, 6})
    end)

    it('can be called with arguments and return values', function()
      local mockFn = mock.fn()
      mockFn.returns(4, 5, 6)
      expect(mockFn(1, 2, 3)).toEqual({4, 5, 6})
    end)

    it('can be called with arguments and return values', function()
      local mockFn = mock.fn()
      mockFn.returns(4, 5, 6)
      expect(mockFn(1, 2, 3)).toEqual({4, 5, 6})
    end)

    it('can be called with arguments and return values', function()
      local mockFn = mock.fn()
      mockFn.returns(4, 5, 6)
      expect(mockFn(1, 2, 3)).toEqual({4, 5, 6})
    end)

    it('can be called with arguments and return values', function()
      local mockFn = mock.fn()
      mockFn.returns(4, 5, 6)
      expect(mockFn(1, 2, 3)).toEqual({4, 5, 6})
    end)

    it('can be called with arguments and return values', function()
      local mockFn = mock.fn()
      mockFn.returns(4, 5, 6)
      expect(mockFn(1, 2, 3)).toEqual({4, 5, 6})
    end)
  end)
end)